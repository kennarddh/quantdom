{"version":3,"file":"quantdom.esm.min.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @class Quantdom\n * @description QuantDOM is a very small dom danipulation library that uses Jquery\n * like syntax but is only comprised of the most use Jquery functions. Made to making\n * manipulating the dom less verbose and less key strokes. I chose to base it of Jquery's\n * syntax as many developers are already familar with it so it should be easy to just start using.\n */\nclass Quantdom {\n  constructor(selector) {\n    this.selector = selector;\n    if (typeof selector === 'string') {\n      this.els = document.querySelectorAll(selector);\n    } else if (NodeList.prototype.isPrototypeOf(selector)) {\n      this.els = selector; // allow passing in nodelist\n    } else {\n      this.els = [selector]; // handles the context/this case\n    }\n  }\n}\n\n// using prototype will be more efficient and\n// allows for a shared function across instances of the class\n// ===========================================================\n\n/**\n * @description Run a function on each iteration on the list of elements.\n * Don't remove as other methods depend on this for iteration.\n * @param {function} handler A function to run on each iteration of the loop\n */\nQuantdom.prototype.each = function (handler) {\n  this.els.forEach(handler);\n};\n\n/**\n * @description returns Quantdom instance with first element that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {Quantdom} returns first element that matches the selector\n */\nQuantdom.prototype.find = function (selector) {\n  return new Quantdom(this.els[0].querySelector(selector));\n};\n\n/**\n * @description returns Quantdom instance with elements that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {Quantdom} returns nodelist of that matches the selector\n */\nQuantdom.prototype.findAllEls = function (selector) {\n  return new Quantdom(this.els[0].querySelectorAll(selector));\n};\n\n/**\n * @description returns first element that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {HTMLElement} returns first element that matches the selector\n */\nQuantdom.prototype.findEl = function (selector) {\n  return this.els[0].querySelector(selector);\n};\n\n/**\n * @description returns elements that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {Nodelist} returns nodelist of that matches the selector\n */\nQuantdom.prototype.findAllEls = function (selector) {\n  return this.els[0].querySelectorAll(selector);\n};\n\n/**\n * @description returns first element in an array of elements with same selector\n * @param {integer} [index] index of element to return\n * @returns {HTMLElement} an element in the array of elements you want to use\n */\nQuantdom.prototype.el = function (index = 0) {\n  return Array.from(this.els).at(index);\n};\n\n/**\n * @description returns last element in an array of elements with same selector\n * @returns {HTMLElement} last element in array of elements you want to use\n */\nQuantdom.prototype.lastEl = function () {\n  return this.els[this.els.length - 1];\n};\n\n/**\n * @description returns all matching elements, alias for querySelectorAll\n * @returns {Nodelist} an a nodelists\n */\nQuantdom.prototype.els = function () {\n  return this.els;\n};\n\n/**\n * @description add an event on an element(s)\n * @param {string} event type of event to add to element\n * @param {function} listener event listener function to execute on event\n */\nQuantdom.prototype.on = function (event, listener) {\n  this.each((el) => {\n    el.addEventListener(event, listener);\n  });\n};\n\n/**\n * @description remove an event on an element(s)\n * @param {string} event type of event to add to element\n * @param {function} listener event listener function to remove\n */\nQuantdom.prototype.off = function (event, listener) {\n  this.each((el) => {\n    el.removeEventListener(event, listener);\n  });\n};\n\n/**\n * @description appends an html string to a dom element\n * @param  {string} html html string to append to dom\n */\nQuantdom.prototype.append = function (html) {\n  this.each((el) => {\n    el.insertAdjacentHTML('beforeend', html);\n  });\n};\n\n/**\n * @description prepend html string to dom\n * @param {string} html string of html to prepend\n */\nQuantdom.prototype.prepend = function (html) {\n  this.each((el) => {\n    el.insertAdjacentHTML('afterbegin', html);\n  });\n};\n\n/**\n * @description insert html string to dom right before element\n * @param {string} html string of html to prepend\n */\nQuantdom.prototype.before = function (html) {\n  this.each((el) => {\n    el.insertAdjacentHTML('beforebegin', html);\n  });\n};\n\n/**\n * @description insert html string to dom right after element\n * @param {string} html string of html to prepend\n */\nQuantdom.prototype.after = function (html) {\n  this.each((el) => {\n    el.insertAdjacentHTML('afterend', html);\n  });\n};\n\n/**\n * @description sets elements attribute or returns first element attribute value\n * @param {string} attr an attribue\n * @param {any} value a value to set attribute\n * @return {string} value of first occurence of element attribute\n */\nQuantdom.prototype.attr = function (attr, value) {\n  if (value !== undefined) {\n    this.each((el) => {\n      el.setAttribute(attr, value);\n    });\n  } else {\n    return this.els[0].getAttribute(attr);\n  }\n};\n\n/**\n * @description adds display none from css inline styles\n * @param {boolean} [aria] if true sets ara-hidden to true instead of setting inline display style to none\n */\nQuantdom.prototype.hide = function (ariaOnly) {\n  this.each((el) => {\n    if (ariaOnly) {\n      el.setAttribute('aria-hidden', 'true');\n    } else {\n      el.style.display = 'none';\n      el.setAttribute('aria-hidden', 'true');\n    }\n  });\n};\n\n/**\n * @description removes display none from css inline styles\n * @param {boolean} [aria] if true sets ara-hidden to false instead of removing inline display style\n */\nQuantdom.prototype.show = function (ariaOnly) {\n  this.each((el) => {\n    if (ariaOnly) {\n      el.setAttribute('aria-hidden', 'false');\n    } else {\n      el.style.display = '';\n      el.setAttribute('aria-hidden', 'false');\n    }\n  });\n};\n\n/**\n * @description inserts html/replaces html or returns html of an element\n * @param {string} [html] html to insert into dom\n * @returns {string} html of first occurence of element\n */\nQuantdom.prototype.html = function (html) {\n  if (html !== undefined) {\n    this.each((el) => {\n      el.innerHTML = html;\n    });\n  } else {\n    return this.els[0].innerHTML;\n  }\n};\n/**\n * @description inserts text/replaces text or returns text of an element\n * @param {string} [newValue] text to insert into dom\n * @returns {string} text of first occurence of element\n */\nQuantdom.prototype.text = function (newValue) {\n  if (newValue !== undefined) {\n    this.each((el) => {\n      el.textContent = newValue;\n    });\n  } else {\n    return this.els[0].textContent;\n  }\n};\n\n/**\n * @description gets a value of first html element or sets a new value of all htmlElements\n * @param {*} [newValue] a new value to set\n * @returns {*} value of first occurence of element\n */\nQuantdom.prototype.val = function (newValue) {\n  if (newValue === undefined) {\n    return this.els[0].value;\n  } else {\n    this.each((el) => {\n      el.value = newValue;\n    });\n  }\n};\n\n/**\n * @description add class to selected element(s)\n * @param {string} className\n */\nQuantdom.prototype.addClass = function (className) {\n  this.each((el) => {\n    el.classList.add(className);\n  });\n};\n\n/**\n * @description remove a class from selected element(s)\n * @param {string} className\n */\nQuantdom.prototype.removeClass = function (className) {\n  this.each((el) => {\n    el.classList.remove(className);\n  });\n};\n\n/**\n * @description set style or returns rulename\n * @param {string} prop css property to get or set\n * @param {*} [value] value to set styles\n * @returns computed style of element\n */\nQuantdom.prototype.css = function (prop, value) {\n  if (prop && value) {\n    this.each((el) => {\n      el.style[prop] = value;\n    });\n  } else {\n    return getComputedStyle(this.els[0])[prop];\n  }\n};\n\n/**\n * @description initializes Quantdom class in order to use it methods\n * @param {String | HTMLElement} selector an DOM element to manipulate\n * @returns {Quantdom}\n */\nexport default function (selector) {\n  return new Quantdom(selector);\n}\n"],"names":["Quantdom","constructor","selector","this","els","document","querySelectorAll","NodeList","prototype","isPrototypeOf","index","each","handler","forEach","find","querySelector","findAllEls","findEl","el","Array","from","at","lastEl","length","on","event","listener","addEventListener","off","removeEventListener","append","html","insertAdjacentHTML","prepend","before","after","attr","value","undefined","getAttribute","setAttribute","hide","ariaOnly","style","display","show","innerHTML","text","newValue","textContent","val","addClass","className","classList","add","removeClass","remove","css","prop","getComputedStyle"],"mappings":"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"}